<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/
..\FrameXML\UI.xsd">	
	<Include file="Templates.xml"/>
	<Script file="GUI.lua"/>
	<Script file="localization.gui.en.lua"/><!-- Default Language -->
	<Script file="localization.gui.de.lua"/>
	<Script file="localization.gui.fr.lua"/>
	<Script file="localization.gui.tw.lua"/>
	<Script file="localization.gui.cn.lua"/>
	<Script file="localization.gui.es.lua"/>
	<!-- ****************************************** -->

	<Frame name="DBMBossModFrame" toplevel="true" parent="UIParent" enableMouse="true" hidden="true" frameStrata="DIALOG">
		<Size>
			<AbsDimension x="384" y="512"/>
		</Size>
		<Anchors>
			<Anchor point="TOPLEFT">
				<Offset>
					<AbsDimension x="0" y="-104"/>
				</Offset>
			</Anchor>
		</Anchors>
		<HitRectInsets>
			<AbsInset left="0" right="30" top="0" bottom="45"/>
		</HitRectInsets>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture file="Interface\AddOns\DBM_API\Textures\MainFrameIcon">
					<Size>
						<AbsDimension x="60" y="60"/>
					</Size>
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="7" y="-6"/>
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="ARTWORK">
				<Texture name="DBMBossModFrameTopLeft" file="Interface\PaperDollInfoFrame\UI-Character-General-TopLeft">
					<Size>
						<AbsDimension x="256" y="256"/>
					</Size>
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
				<Texture name="DBMBossModFrameTopRight" file="Interface\PaperDollInfoFrame\UI-Character-General-TopRight">
					<Size>
						<AbsDimension x="128" y="256"/>
					</Size>
					<Anchors>
						<Anchor point="TOPRIGHT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
				<Texture name="DBMBossModFrameBottomLeft" file="Interface\FriendsFrame\UI-FriendsFrame-BotLeft">
					<Size>
						<AbsDimension x="256" y="256"/>
					</Size>
					<Anchors>
						<Anchor point="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
				<Texture name="DBMBossModFrameBottomRight" file="Interface\FriendsFrame\UI-FriendsFrame-BotRight">
					<Size>
						<AbsDimension x="128" y="256"/>
					</Size>
					<Anchors>
						<Anchor point="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<FontString name="DBMBossModFrameTitleText" inherits="GameFontNormal">
					<Anchors>
						<Anchor point="TOP">
							<Offset>
								<AbsDimension x="0" y="-18"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Frame name="DBMBossModDropDown" inherits="UIDropDownMenuTemplate"/>
			<Button name="$parentCloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset>
							<AbsDimension x="-30" y="-8"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parentOptionsButton" inherits="UIPanelButtonTemplate" text="DBMGUI_SHOW_OPTIONS">
				<Size><AbsDimension x="82" y="22"/></Size>
				<Anchors>
					<Anchor point="TOPRIGHT" relativeTo="$parent" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="-37" y="-43"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnMouseUp>
						HideDropDownMenu(1);
						if DBMOptionsFrame:IsShown() then
							HideUIPanel(DBMOptionsFrame);
							this:SetText(DBMGUI_SHOW_OPTIONS);
						else
							ShowUIPanel(DBMOptionsFrame);
							HideUIPanel(DBMOptionsFrame); -- strange slider bug
							ShowUIPanel(DBMOptionsFrame);
							this:SetText(DBMGUI_HIDE_OPTIONS);
						end
					</OnMouseUp>
				</Scripts>
				<NormalText inherits="GameFontNormal"/>
				<HighlightText inherits="GameFontNormal"/>
			</Button>
			<Button name="$parentDropDownLevel" inherits="UIDropDownMenuTemplate">
				<Anchors>
					<Anchor point="RIGHT" relativeTo="$parentOptionsButton" relativePoint="LEFT">
						<Offset>
							<AbsDimension x="18" y="-3"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Size><AbsDimension x="150" y="160"/></Size>
				<Scripts>
					<OnLoad>
						UIDropDownMenu_Initialize(this, DBMBossModListFrame_LevelDropDown_CreateMenu);
						UIDropDownMenu_SetSelectedID(this, 1);
						UIDropDownMenu_SetText(DBMGUI_DROPDOWN_LEVEL_1, this);
						UIDropDownMenu_SetWidth(106, this)
                    </OnLoad>
					<OnShow>
						if( DBM.Options.Level70Gui ) then
							UIDropDownMenu_SetSelectedID(this, 1);
							UIDropDownMenu_SetText(DBMGUI_DROPDOWN_LEVEL_1, this);
						else
							UIDropDownMenu_SetSelectedID(this, 2);
							UIDropDownMenu_SetText(DBMGUI_DROPDOWN_LEVEL_2, this);
						end
					</OnShow>
					<OnUpdate> <!--ugly, but I don't want to have a wrong text if another dropdown menu does something. this seems to be a stupid bug oO -->
						if UIDropDownMenu_GetText(this) ~= DBMGUI_DROPDOWN_LEVEL_1
						and UIDropDownMenu_GetText(this) ~= DBMGUI_DROPDOWN_LEVEL_2 then
							if( DBM.Options.Level70Gui ) then
								UIDropDownMenu_SetSelectedID(this, 1);
								UIDropDownMenu_SetText(DBMGUI_DROPDOWN_LEVEL_1, this);
							else
								UIDropDownMenu_SetSelectedID(this, 2);
								UIDropDownMenu_SetText(DBMGUI_DROPDOWN_LEVEL_2, this);
							end
						end
					</OnUpdate>
				</Scripts>
			</Button>
			<Button name="$parentLoadBossModsButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_LOADMODS">
				<Size><AbsDimension x="78" y="22"/></Size>
				<Anchors>
					<Anchor point="RIGHT" relativeTo="$parentDropDownLevel" relativePoint="LEFT">
						<Offset>
							<AbsDimension x="18" y="3"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnMouseUp>
						DBMGui_ShowLoadBossModMenu(true);
					</OnMouseUp>
				</Scripts>
				<NormalText inherits="GameFontNormal"/>
				<HighlightText inherits="GameFontNormal"/>
			</Button>
	




			<!-- ************************************** -->
			<!--  Give me the Bossmod List              -->
			<!-- ************************************** -->
			<Frame name="DBMBossModListFrame" hidden="true" setAllPoints="true">
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="DBMBossModListFrameLoadAddOnInfo" inherits="GameFontNormal" justifyH="LEFT" text=" ">
							<Size>
								<AbsDimension x="310" y="0"/>
							</Size>
							<Anchors>
								<Anchor point="TOP" relativeTo="$parent" relativePoint="TOP">
									<Offset>
										<AbsDimension x="0" y="-140"/>
									</Offset>
								</Anchor>
							</Anchors>
							<Color r="1.0" g="1.0" b="1.0"/>
						</FontString>
					</Layer>

				</Layers>
				<Frames>
					<!-- Buttons at the Bottom Page -->
					<Button name="DBMBossModListFrameButton1" inherits="UIPanelButtonTemplate">
						<Size><AbsDimension x="131" y="21"/></Size>
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativeTo="DBMBossModListFrame">
								<Offset><AbsDimension x="17" y="107"/></Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModListFrameButton2" inherits="UIPanelButtonTemplate">
						<Size><AbsDimension x="131" y="21"/></Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModListFrameButton1" relativePoint="BOTTOM">
								<Offset><AbsDimension x="0" y="-5"/></Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModListFrameButton3" inherits="UIPanelButtonTemplate">
						<Size><AbsDimension x="131" y="21"/></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="DBMBossModListFrameButton1" relativePoint="RIGHT">
								<Offset><AbsDimension x="66" y="0"/></Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModListFrameButton4" inherits="UIPanelButtonTemplate">
						<Size><AbsDimension x="131" y="21"/></Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModListFrameButton3" relativePoint="BOTTOM">
								<Offset><AbsDimension x="0" y="-5"/></Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModListFrameLoadAddOns" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_LOADADDON">
						<Size><AbsDimension x="131" y="21"/></Size>
						<Anchors>
							<Anchor point="CENTER" relativeTo="$parent" relativePoint="CENTER">
								<Offset><AbsDimension x="-10" y="-5"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBMGui_LoadBossModMenu_KeepShown = true; -- you can't pass arguments to the initialize function...so I have to use a global variable :(
								DBMGui_ShowLoadBossModMenu();
								DBMGui_LoadBossModMenu_KeepShown = nil;
							</OnMouseUp>
						</Scripts>
					</Button>

					<!-- Selection List -->
					<Button name="DBMBossModButton1" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="DBMBossModFrame">
								<Offset>
									<AbsDimension x="23" y="-76"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton2" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton1" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton3" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton2" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton4" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton3" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton5" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton4" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton6" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton5" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton7" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton6" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton8" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton7" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton9" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton8" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<Button name="DBMBossModButton10" inherits="DBMBossModFrameButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="DBMBossModButton9" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Button>
					<ScrollFrame name="DBMBossModFrameDBMBossModScrollFrame" inherits="FauxScrollFrameTemplate">
						<Size>
							<AbsDimension x="296" y="304"/>
						</Size>
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="DBMBossModFrame">
								<Offset>
									<AbsDimension x="-67" y="-75"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<Texture file="Interface\PaperDollInfoFrame\UI-Character-ScrollBar">
									<Size>
										<AbsDimension x="31" y="256"/>
									</Size>
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="-2" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
									<TexCoords left="0" right="0.484375" top="0" bottom="1.0"/>
								</Texture>
								<Texture file="Interface\PaperDollInfoFrame\UI-Character-ScrollBar">
									<Size>
										<AbsDimension x="31" y="106"/>
									</Size>
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="-2" y="-2"/>
											</Offset>
										</Anchor>
									</Anchors>
									<TexCoords left="0.515625" right="1.0" top="0" bottom="0.4140625"/>
								</Texture>
							</Layer>
						</Layers>
						<Scripts>
							<OnVerticalScroll>
								FauxScrollFrame_OnVerticalScroll(DBMGUI_FRAME_HEIGHT, DBMBossModList_Update)
							</OnVerticalScroll>
						</Scripts>
					</ScrollFrame>
				</Frames>
			</Frame>
			<Button name="$parentTab1"  inherits="DBMBossModFrameTabTemplate" id="1"  hidden="true"/>
			<Button name="$parentTab2"  inherits="DBMBossModFrameTabTemplate" id="2"  hidden="true"/>
			<Button name="$parentTab3"  inherits="DBMBossModFrameTabTemplate" id="3"  hidden="true"/>
			<Button name="$parentTab4"  inherits="DBMBossModFrameTabTemplate" id="4"  hidden="true"/>
			<Button name="$parentTab5"  inherits="DBMBossModFrameTabTemplate" id="5"  hidden="true"/>
			<Button name="$parentTab6"  inherits="DBMBossModFrameTabTemplate" id="6"  hidden="true"/>
			<!--
			<Button name="$parentTab7"  inherits="DBMBossModFrameTabTemplate" id="7"  hidden="true"/>
			<Button name="$parentTab8"  inherits="DBMBossModFrameTabTemplate" id="8"  hidden="true"/>
			<Button name="$parentTab9"  inherits="DBMBossModFrameTabTemplate" id="9"  hidden="true"/>
			<Button name="$parentTab10" inherits="DBMBossModFrameTabTemplate" id="10" hidden="true"/>
			-->
		</Frames>
		<Scripts>
			<OnUpdate>
				DBMGUI_SetTabPosition_Update(2, 11, 62, -16, 0, DBMGUI_MAINFRAME_TABCOUNT);
			</OnUpdate>
			<OnLoad>
				this:RegisterEvent("PLAYER_LOGIN");
				this:RegisterEvent("RAID_ROSTER_UPDATE");
				this:RegisterEvent("PLAYER_LOGOUT");

				DBMBossModFrame.lastSelectedBossMod = {};
				PanelTemplates_SetNumTabs(this, DBMGUI_MAINFRAME_TABCOUNT);	-- Anzahl Tabs // Naxx, AQ, etc.
				DBMBossModFrame.selectedTab = 1;
				DBMBossModFrame.showPage = 1;
				PanelTemplates_UpdateTabs(this);
	
				DBMBossModFrame.selectedBossMod = 0;

				for i, value in pairs(DBMGUI_FRAME_LOADADDON_DESCRIPTION) do
					DBMBossModListFrameLoadAddOnInfo:SetText( 
						DBMBossModListFrameLoadAddOnInfo:GetText().."\n"..value
					);
				end
			</OnLoad>
			<OnShow>
				DBMBossModFrame_OnShow();

				PanelTemplates_SetNumTabs(this, DBMGUI_MAINFRAME_TABCOUNT);
				for i = 1, 6, 1 do
					if i > DBMGUI_MAINFRAME_TABCOUNT then
						getglobal(this:GetName().."Tab"..i):Hide();
					else
						getglobal(this:GetName().."Tab"..i):Show();
						getglobal(this:GetName().."Tab"..i):SetText(DMGUI.MainFrameTabs[i].Title);
						PanelTemplates_TabResize(0, getglobal(this:GetName().."Tab"..i), nil, nil);
					end
				end
				PanelTemplates_UpdateTabs(this);
			</OnShow>
			<OnHide>
				DBMBossModFrame_OnHide();
				DBMOptionsFrame:Hide();
			</OnHide>
			<OnEvent>
				DBMBossModFrame_OnEvent(event);
			</OnEvent>
			<OnMouseWheel>
				return;
			</OnMouseWheel>
		</Scripts>
	</Frame>

	<!-- ******************************************************** -->
	<!-- ******************************************************** -->

	<Frame name="DBMOptionsFrame" toplevel="true" movable="true" parent="UIParent" enableMouse="true" hidden="true">
		<Size>
			<AbsDimension x="384" y="400"/>
		</Size>
		<Anchors>
			<Anchor point="TOPLEFT" relativeTo="DBMBossModFrame" relativePoint="TOPRIGHT">
				<Offset>
					<AbsDimension x="-35" y="-25"/>
				</Offset>
			</Anchor>
		</Anchors>
		<Layers>
			<Layer level="BORDER">
				<Texture name="$parentTexture" file="Interface\AddOns\DBM_API\Textures\OptionsFrame" alphaMode="ALPHAKEY">
					<Size><AbsDimension x="512" y="512"/></Size>
					<Anchors><Anchor point="TOPLEFT"/></Anchors>					
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<FontString name="$parentTitle" text="DBMGUI_OPTIONS" inherits="GameFontNormal">
					<Anchors><Anchor point="TOP"><Offset><AbsDimension x="-10" y="-6"/></Offset></Anchor></Anchors>
				</FontString>
				<FontString name="$parentVersion" text="DBMGUI_VERSION" inherits="GameFontDisableSmall">
					<Anchors><Anchor point="BOTTOMRIGHT"><Offset><AbsDimension x="-17" y="13"/></Offset></Anchor></Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Button name="$parentCloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="TOPRIGHT" relativeTo="$parent" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="2" y="4"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						this:GetParent():Hide();
					</OnClick>
				</Scripts>
			</Button>
			<!-- Tabs -->
			<Button name="$parentTab1" inherits="DBMOptionsFrameTabTemplate" id="1" hidden="true" text="DBMGUI_SIDEFRAME_TAB1"></Button>
			<Button name="$parentTab2" inherits="DBMOptionsFrameTabTemplate" id="2" hidden="true" text="DBMGUI_SIDEFRAME_TAB2"></Button>
			<Button name="$parentTab3" inherits="DBMOptionsFrameTabTemplate" id="3" hidden="true" text="DBMGUI_SIDEFRAME_TAB22"></Button>
			<Button name="$parentTab4" inherits="DBMOptionsFrameTabTemplate" id="4" hidden="true" text="DBMGUI_SIDEFRAME_TAB3"></Button>
			<Button name="$parentTab5" inherits="DBMOptionsFrameTabTemplate" id="5" hidden="true" text="DBMGUI_SIDEFRAME_TAB4"></Button>
			<Button name="$parentTab6" inherits="DBMOptionsFrameTabTemplate" id="6" hidden="true" text="DBMGUI_SIDEFRAME_TAB5"></Button>

			<!-- ************************************** -->
			<!--  Want some Options? ... here we go !!  -->
			<!-- ************************************** -->
			<Frame name="$parentPage1" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage1 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentSyncSettingsTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_SYNCSETTINGS">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>

						<FontString name="$parentMinimapButtonTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_MINIMAPBUTTON">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-115"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>

						<FontString name="$parentAggroAlertTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_AGGROALERT">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-190"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>

				<Frames>
					<!-- Sync Setup -->
					<CheckButton name="$parentOptionSyncEnable" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="40" y="-50"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_SYNC_ENABLE);
								this:SetChecked(DBM.Options.EnableSync);
							</OnShow>
							<OnMouseUp>
								DBM.Options.EnableSync = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentOptionSyncOldEnable" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionSyncEnable" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_ALLOWSYNCFROMOLDCLIENT);
								this:SetChecked(DBM.Options.AllowSyncFromOldVersions);
							</OnShow>
							<OnMouseUp>
								DBM.Options.AllowSyncFromOldVersions = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>

					<Button name="$parentSyncSystemVersionCheckButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_VERSION_CHECK">
						<Size><AbsDimension x="120" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionSyncEnable" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="150" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								SlashCmdList["LVNAXXRAMASBOSSMODS"]("ver");
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
<!--				<Button name="$parentSyncSystemStatusBarsButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_STATUSBAR_SYNCINFO">
						<Size><AbsDimension x="120" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentSyncSystemVersionCheckButton" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-20"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								local syncedBars = false;
								for index, value in pairs(DBM.StatusBarData) do
									if value.syncedBy then
										DBM.AddMsg(index..": "..value.syncedBy);
										syncedBars = true;
									end
								end
								if( syncedBars == false ) then
									DBM.AddMsg(DBMGUI_BUTTON_STATUSBAR_SYNCINFO_FAILD);
								end
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>-->



					<!-- ******************** -->
					<!-- Minimap Button Setup -->
					<!-- ******************** -->
					<Slider name="$parentMiniMapPositionSlider" inherits="DBMSliderTemplate" minValue="0" maxValue="360" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="100" y="-130"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_MINIMAP_1);
								this:SetValue(DBM.Options.MinimapButton.Position);
								getglobal(this:GetName().."Value"):SetText(this:GetValue());
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(this:GetValue());
								DBM.Options.MinimapButton.Position = this:GetValue();
								DBMMinimapButton_Move();
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentMiniMapRadiusSlider" inherits="DBMSliderTemplate" maxValue="125" valueStep="0.1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentMiniMapPositionSlider" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-15"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_MINIMAP_2);
								this:SetValue(DBM.Options.MinimapButton.Radius);
								this:SetMinMaxValues(25, 125);
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								DBM.Options.MinimapButton.Radius = DBM.math.round(this:GetValue(), 1);
								DBMMinimapButton_Move();
							</OnValueChanged>
						</Scripts>
					</Slider>
					<CheckButton name="$parentOptionMiniMap" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentMiniMapPositionSlider" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="100" y="20"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_MINIMAP);
								this:SetChecked(DBM.Options.MinimapButton.Enabled);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.MinimapButton.Enabled = false;
									DBMMinimapButton:Hide();
								else 
									DBM.Options.MinimapButton.Enabled = true;
									DBMMinimapButton:Show();
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					

					<!-- *********** -->
					<!-- AGGRO ALERT -->
					<!-- *********** -->
					<CheckButton name="$parentButtonEnableAggroAlert" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="30" y="-205"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_ENABLE);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroAlert);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroAlert = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroAlert = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<Button name="$parentButtonTestAggroAlert" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_AGGROALERT_TEST">
						<Size><AbsDimension x="120" y="25"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonEnableAggroAlert" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="200" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.HasAggro("GUI");
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Button name="$parentButtonResetAggroAlert" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_AGGROALERT_RESET">
						<Size><AbsDimension x="120" y="25"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonTestAggroAlert" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-30"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								if UnitClass("player") == DBM_WARRIOR then
									DBM.Options.CharSettings[UnitName("player")].AggroAlert = false;
									DBM.Options.CharSettings[UnitName("player")].AggroSound = false;
									DBM.Options.CharSettings[UnitName("player")].AggroFlash = false;
									DBM.Options.CharSettings[UnitName("player")].AggroShake = false;
									DBM.Options.CharSettings[UnitName("player")].AggroSpecialWarning = false;
									DBM.Options.CharSettings[UnitName("player")].AggroLocalWarning = false;
								else
									DBM.Options.CharSettings[UnitName("player")].AggroAlert = true;
									DBM.Options.CharSettings[UnitName("player")].AggroSound = false;
									DBM.Options.CharSettings[UnitName("player")].AggroFlash = true;
									DBM.Options.CharSettings[UnitName("player")].AggroShake = true;
									DBM.Options.CharSettings[UnitName("player")].AggroSpecialWarning = true;
									DBM.Options.CharSettings[UnitName("player")].AggroLocalWarning = false;
								end
								HideUIPanel(DBMOptionsFrame);
								ShowUIPanel(DBMOptionsFrame);
								DBM.AddMsg(DBMGUI_BUTTON_AGGROALERT_RESET_DONE);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<CheckButton name="$parentButtonSoundAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonEnableAggroAlert" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_PLAYSOUND);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroSound);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroSound = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroSound = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFlashAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonSoundAggro" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_FLASH);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroFlash);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroFlash = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroFlash = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonShakeAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFlashAggro" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_SHAKE);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroShake);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroShake = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroShake = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonSpecialWarningAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonShakeAggro" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_SPECIALTEXT);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroSpecialWarning);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroSpecialWarning = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroSpecialWarning = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonLocalWarningAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonSpecialWarningAggro" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AGGROALERT_LOCALWARNING);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroLocalWarning);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroLocalWarning = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroLocalWarning = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonPartyAggro" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonLocalWarningAggro" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_AGGROALERT_ENABLE_PARTY);
								this:SetChecked(DBM.Options.CharSettings[UnitName("player")].AggroAlertInAllInstances);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.CharSettings[UnitName("player")].AggroAlertInAllInstances = false;
								else 
									DBM.Options.CharSettings[UnitName("player")].AggroAlertInAllInstances = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>

					<Button name="$parentCheckRangeButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_RANGECHECK">
						<Size><AbsDimension x="104" y="22"/></Size>
						<Anchors>
							<Anchor point="BOTTOMRIGHT">
								<Offset><AbsDimension x="-44" y="5"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.RangeCheck();
							</OnMouseUp>
							<OnEnter>
								GameTooltip_AddNewbieTip(DBMGUI_TOOLTIP_RANGECHECK_TITLE, 1.0, 1.0, 1.0, DBMGUI_TOOLTIP_RANGECHECK_TEXT, 1);
							</OnEnter>
							<OnLeave>
								GameTooltip:Hide();
							</OnLeave>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Button name="$parentDistanceFrame" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_DISTANCEFRAME">
						<Size><AbsDimension x="98" y="22"/></Size>
						<Anchors>
							<Anchor point="RIGHT" relativeTo="$parentCheckRangeButton" relativePoint="LEFT">
								<Offset><AbsDimension x="-2" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBM_Gui_DistanceFrame();
							</OnMouseUp>
							<OnEnter>
								GameTooltip_AddNewbieTip(DBMGUI_TOOLTIP_DISTANCEFRAME_TITLE, 1.0, 1.0, 1.0, DBMGUI_TOOLTIP_DISTANCEFRAME_TEXT, 1);
							</OnEnter>
							<OnLeave>
								GameTooltip:Hide();
							</OnLeave>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
				
				</Frames>
			</Frame>



			
			<!-- ************************************ -->
			<!--                 Page 2               -->
			<!-- ************************************ -->
			<Frame name="$parentPage2" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage2 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentStatusBarsTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_STATUSBARS">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
						<FontString name="$parentPizzaTimerTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_PIZZATIMER">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-275"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<!-- Statusbar Setup -->
					<Frame name="$parentStatusBarTimerExample" hidden="false" inherits="DBM_StatusBarTimerDefaultTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="46" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Frame>
					
					<Frame name="$parentStatusBarDesignDropDown" inherits="UIDropDownMenuTemplate">	
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="190" y="20"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size><AbsDimension x="100" y="16"/></Size>
						<Scripts>
							<OnLoad>
								UIDropDownMenu_Initialize(this, function()
									local i = 1;
									while DBMStatusBars_Designs[i] do
										local info = UIDropDownMenu_CreateInfo();
										info.func = function()
											DBM_Gui_ChangeExampleBarDesign(this:GetID(), true);
											HideUIPanel(DBMOptionsFrame);
											ShowUIPanel(DBMOptionsFrame);
										end;
										info.text = DBMStatusBars_Designs[i].name;
										UIDropDownMenu_AddButton(info);
										i = i + 1;
									end
								end);
								UIDropDownMenu_SetWidth(100);
								UIDropDownMenu_SetSelectedID(this, DBM.Options.StatusBarDesign);
							</OnLoad>
							<OnUpdate>
								if UIDropDownMenu_GetText(this) ~= DBMStatusBars_Designs[DBM.Options.StatusBarDesign].name then
									UIDropDownMenu_SetSelectedID(this, DBM.Options.StatusBarDesign);
									UIDropDownMenu_SetText(DBMStatusBars_Designs[DBM.Options.StatusBarDesign].name, this);
								end
							</OnUpdate>
						</Scripts>
					</Frame>					
					<CheckButton name="$parentButtonEnableStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="-10" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_STATUSBAR_ENABLE);
								this:SetChecked(DBM.Options.EnableStatusBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.EnableStatusBars = false;
									for index, value in pairs(DBM.StatusBarData) do	-- hide current Bars
										DBM.EndStatusBarTimer(index, true, nil, true);
									end
								else 
									DBM.Options.EnableStatusBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFillUpStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonEnableStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_STATUSBAR_FILLUP);
								this:SetChecked(DBM.Options.FillUpStatusBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.FillUpStatusBars = false;
								else 
									DBM.Options.FillUpStatusBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFliptOverStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFillUpStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_STATUSBAR_FLIPOVER);
								this:SetChecked(DBM.Options.StatusBarsFlippedOver);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.StatusBarsFlippedOver = false;
								else 
									DBM.Options.StatusBarsFlippedOver = true;
								end
								DBMStatusBars_FlipOver();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFlashBarOnEnd" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFliptOverStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_FLASHONEND);
								this:SetChecked(DBM.Options.FlashBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.FlashBars = false;
								else 
									DBM.Options.FlashBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonAutoColorBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFlashBarOnEnd" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_AUTOCOLORBARS);
								this:SetChecked(DBM.Options.AutoColorBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.AutoColorBars = false;
									for index, value in pairs(DBM.StatusBarData) do
										if value.frame.specialColor then
											getglobal(value.frame:GetName().."Bar"):SetStatusBarColor(value.color.R, value.color.G, value.color.B, value.color.A);
										else
											getglobal(value.frame:GetName().."Bar"):SetStatusBarColor(DBM.Options.StatusBarColor.r, DBM.Options.StatusBarColor.g, DBM.Options.StatusBarColor.b, DBM.Options.StatusBarColor.a);
										end
									end
								else 
									DBM.Options.AutoColorBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					
					<CheckButton name="$parentButtonShowIcon" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="LEFT" relativeTo="$parentButtonFlashBarOnEnd" relativePoint="LEFT">
								<Offset><AbsDimension x="170" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_SHOW_ICON);
								this:SetChecked(DBM.Options.ShowIcon);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.ShowIcon = false;
									
									local i = 1;
									while getglobal("DBM_StatusBarTimer"..i.."Icon") do
										getglobal("DBM_StatusBarTimer"..i.."Icon"):Hide();
										i = i + 1;
									end
								else 
									DBM.Options.ShowIcon = true;
									
									local i = 1;
									while getglobal("DBM_StatusBarTimer"..i.."Icon") do
										if getglobal("DBM_StatusBarTimer"..i).table and getglobal("DBM_StatusBarTimer"..i).table.icon then
											getglobal("DBM_StatusBarTimer"..i.."Icon"):Show();
										end
										i = i + 1;
									end
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonShowIconRight" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonShowIcon" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_ICON_SIDE);
								this:SetChecked(DBM.Options.IconRight);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.IconRight = false;
									
									local i = 1;
									while getglobal("DBM_StatusBarTimer"..i.."Icon") do
										getglobal("DBM_StatusBarTimer"..i.."Icon"):ClearAllPoints();
										getglobal("DBM_StatusBarTimer"..i.."Icon"):SetPoint("RIGHT", "DBM_StatusBarTimer"..i, "LEFT", (DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetX) or 0, DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetY or 0);
										i = i + 1;
									end
									if DBM_StatusBarTimerDragIcon then
										DBM_StatusBarTimerDragIcon:ClearAllPoints();
										DBM_StatusBarTimerDragIcon:SetPoint("RIGHT", "DBM_StatusBarTimerDrag", "LEFT", (DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetX) or 0, DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetY or 0);
									end
								else 
									DBM.Options.IconRight = true;
									
									local i = 1;
									while getglobal("DBM_StatusBarTimer"..i.."Icon") do
										getglobal("DBM_StatusBarTimer"..i.."Icon"):ClearAllPoints();
										getglobal("DBM_StatusBarTimer"..i.."Icon"):SetPoint("LEFT", "DBM_StatusBarTimer"..i, "RIGHT", -(DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetX or 0), DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetY or 0);
										i = i + 1;
									end
									if DBM_StatusBarTimerDragIcon then
										DBM_StatusBarTimerDragIcon:ClearAllPoints();
										DBM_StatusBarTimerDragIcon:SetPoint("LEFT", "DBM_StatusBarTimerDrag", "RIGHT", -(DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetX or 0), DBMStatusBars_Designs[DBM.Options.StatusBarDesign].iconOffsetY or 0);
									end
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>

					<ColorSelect name="$parentColorSelect" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="-10" y="-22"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">				<!-- Color Round -->
							<Size><AbsDimension x="75" y="75" /></Size>
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons"> <!-- Target -->
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Scripts>
							<OnShow>
								local r, g, b = DBM.Options.StatusBarColor.r, DBM.Options.StatusBarColor.g, DBM.Options.StatusBarColor.b;
								this:SetColorRGB(r,g,b); 
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.StatusBarColor.r = r;
								DBM.Options.StatusBarColor.g = g;
								DBM.Options.StatusBarColor.b = b;
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):SetStatusBarColor(r,g,b);
								<!-- Set Colors to the Bars -->
								DBMGuiUpdateStatusbars();
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<Slider name="$parentCSOpacitySlider" orientation="VERTICAL" minValue="0" maxValue="1" valueStep="0.01" defaultValue="1">
						<Size><AbsDimension x="16" y="80"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="80" y="-17"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="OPACITY">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="100%">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="2" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="0%">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="1" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetValue(DBM.Options.StatusBarColor.a);
							</OnShow>
							<OnValueChanged>
								local r, g, b, a = getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):GetStatusBarColor();
								DBM.Options.StatusBarColor.a = this:GetValue();
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):SetStatusBarColor(r,g,b, this:GetValue());
								
								DBMGuiUpdateStatusbars();
							</OnValueChanged>
						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Vertical">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<Slider name="$parentStatusBarScaleSlider" inherits="DBMSliderTemplate" maxValue="3" valueStep="0.025">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentButtonAutoColorBars" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="60" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_SCALE_SLIDER);
								this:SetValue(DBM.Options.StatusBarSize.Scale);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(0.5, 3);
								getglobal(this:GetName().."Value"):SetText(string.format("%.3f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.3f", this:GetValue()));
								DBM.Options.StatusBarSize.Scale = DBM.math.round(this:GetValue(), 3);
								DBMStatusBars_Resize();

								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarWidthSlider" inherits="DBMSliderTemplate" maxValue="500" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarScaleSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_WIDTH_SLIDER);
								this:SetValue(DBM.Options.StatusBarSize.Width);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(100, 500);
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
								DBM.Options.StatusBarSize.Width = DBM.math.round(this:GetValue());
								DBMStatusBars_Resize();

								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarTextSizeSlider" inherits="DBMSliderTemplate" maxValue="25" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarWidthSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_TEXTSIZE_SLIDER);
								this:SetValue(DBM.Options.StatusBarSize.Text);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(5, 25);
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
								DBM.Options.StatusBarSize.Text = DBM.math.round(this:GetValue());
								DBMStatusBars_Resize();
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBarText"):SetFont(STANDARD_TEXT_FONT, DBM.Options.StatusBarSize.Text);
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBarTimer"):SetFont(STANDARD_TEXT_FONT, DBM.Options.StatusBarSize.Text);
								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarCountSlider" inherits="DBMSliderTemplate" maxValue="30" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTextSizeSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								-- this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_STATUSBAR_COUNT);
								this:SetValue(DBM.Options.MaxStatusBars);
								this:SetMinMaxValues(1, 30);
								getglobal(this:GetName().."Value"):SetText(string.format("%d", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%d", this:GetValue()));
								DBM.Options.MaxStatusBars = DBM.math.round(this:GetValue());

								--[[
								if this.ShowTestMsg then
									for i=1, 30, 1 do
										DBM.EndStatusBarTimer(i..". test", true);
									end
									for i=1, DBM.Options.MaxStatusBars, 1 do
										DBM.StartStatusBarTimer(3, i..". test", true);
									end
								end  --]]

								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>



					<!-- ******************* -->
					<!-- Setup PizzaBoxTimer -->
					<!-- ******************* -->
					<EditBox name="$parentPizzaBoxName" inherits="DBMBossModFrameEditBoxTemplate" letters="20">
						<Size><AbsDimension x="125" y="32"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="46" y="-300"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentTitle" inherits="GameFontNormalSmall" text="DBMGUI_EDITBOX_PIZZATIMER_TEXT">
									<Anchors><Anchor point="TOPLEFT" relativeTo="$parent" relativePoint="TOPLEFT"><Offset>
												<AbsDimension x="5" y="10"/>
									</Offset></Anchor></Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								this:SetAutoFocus(false);
							</OnLoad>
							<OnShow>
								this:SetText(DBM.Options.Gui.PizzaTimerText);
							</OnShow>
							<OnEditFocusGained>
								if( this:GetText() == "TestTimer" ) then
									this:SetText("");
								end
							</OnEditFocusGained>
						</Scripts>
					</EditBox>
					<EditBox name="$parentPizzaBoxHour" inherits="DBMBossModFrameEditBoxTemplate" letters="2">
						<!-- DBMOptionsFramePage2PizzaBoxHour -->
						<Size><AbsDimension x="45" y="32"/></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentPizzaBoxName" relativePoint="RIGHT">
								<Offset><AbsDimension x="20" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentTitle" inherits="GameFontNormalSmall" text="DBMGUI_EDITBOX_PIZZATIMER_HOUR">
									<Anchors><Anchor point="TOPLEFT" relativeTo="$parent" relativePoint="TOPLEFT"><Offset>
												<AbsDimension x="-5" y="10"/>
									</Offset></Anchor></Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								this:SetAutoFocus(false);
							</OnLoad>
							<OnShow>
								this:SetNumber(DBM.Options.Gui.PizzaTimerHour);
							</OnShow>
						</Scripts>
					</EditBox>
					<EditBox name="$parentPizzaBoxMin" inherits="DBMBossModFrameEditBoxTemplate" letters="2">
						<!-- DBMOptionsFramePage2PizzaBoxMin -->
						<Size><AbsDimension x="45" y="32"/></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentPizzaBoxHour" relativePoint="RIGHT">
								<Offset><AbsDimension x="20" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentTitle" inherits="GameFontNormalSmall" text="DBMGUI_EDITBOX_PIZZATIMER_MIN">
									<Anchors><Anchor point="TOPLEFT" relativeTo="$parent" relativePoint="TOPLEFT"><Offset>
												<AbsDimension x="-5" y="10"/>
									</Offset></Anchor></Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								this:SetAutoFocus(false);
							</OnLoad>
							<OnShow>
								this:SetNumber(DBM.Options.Gui.PizzaTimerMin);
							</OnShow>
						</Scripts>
					</EditBox>
					<EditBox name="$parentPizzaBoxSec" inherits="DBMBossModFrameEditBoxTemplate" letters="2">
						<Size><AbsDimension x="45" y="32"/></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentPizzaBoxMin" relativePoint="RIGHT">
								<Offset><AbsDimension x="20" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentTitle" inherits="GameFontNormalSmall" text="DBMGUI_EDITBOX_PIZZATIMER_SEC">
									<Anchors><Anchor point="TOPLEFT" relativeTo="$parent" relativePoint="TOPLEFT"><Offset>
												<AbsDimension x="-5" y="10"/>
									</Offset></Anchor></Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								this:SetAutoFocus(false);
							</OnLoad>
							<OnShow>
								this:SetNumber(DBM.Options.Gui.PizzaTimerSec);
							</OnShow>
						</Scripts>
					</EditBox>
					<CheckButton name="$parentOptionBroadcastPizzaTimer" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentPizzaBoxName" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="-10" y="-35"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.Options.Gui.PizzaTimerBroadcast = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<Button name="$parentPizzaTimerStartButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_PIZZATIMER_START">
						<Size><AbsDimension x="120" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionBroadcastPizzaTimer" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="135" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.Options.Gui.PizzaTimerText = getglobal(this:GetParent():GetName().."PizzaBoxName"):GetText(); 
								DBM.Options.Gui.PizzaTimerHour = getglobal(this:GetParent():GetName().."PizzaBoxHour"):GetNumber();
								DBM.Options.Gui.PizzaTimerMin = getglobal(this:GetParent():GetName().."PizzaBoxMin"):GetNumber();
								DBM.Options.Gui.PizzaTimerSec = getglobal(this:GetParent():GetName().."PizzaBoxSec"):GetNumber();	
								if( DBM.Rank > 0 ) then
								else
									DBM.Options.Gui.PizzaTimerBroadcast = false;
								end

								DBM.StartStatusBarTimer(
									((DBM.Options.Gui.PizzaTimerHour * 3600) +
									(DBM.Options.Gui.PizzaTimerMin * 60) +
									  DBM.Options.Gui.PizzaTimerSec),
									DBM.Options.Gui.PizzaTimerText, 
									not DBM.Options.Gui.PizzaTimerBroadcast
								)
								if ((DBM.Options.Gui.PizzaTimerHour * 3600) + (DBM.Options.Gui.PizzaTimerMin * 60) + DBM.Options.Gui.PizzaTimerSec) > 10 then 
									if DBM.Options.Gui.PizzaTimerBroadcast then
										DBM.Schedule(((DBM.Options.Gui.PizzaTimerHour * 3600) + (DBM.Options.Gui.PizzaTimerMin * 60 ) + DBM.Options.Gui.PizzaTimerSec) - 10, "DBM.Announce", string.format(DBM_TIMER_IS_ABOUT_TO_EXPIRE, DBM.Options.Gui.PizzaTimerText));
									else
										DBM.Schedule(((DBM.Options.Gui.PizzaTimerHour * 3600) + (DBM.Options.Gui.PizzaTimerMin * 60 ) + DBM.Options.Gui.PizzaTimerSec) - 10, "DBM.AddSpecialWarning", string.format(DBM_TIMER_IS_ABOUT_TO_EXPIRE, DBM.Options.Gui.PizzaTimerText));
									end
								end
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>


					<Button name="$parentButtonMoveableBar" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_MOVEABLEBAR">
						<Size><AbsDimension x="104" y="22"/></Size>
						<Anchors>
							<Anchor point="BOTTOMRIGHT">
								<Offset><AbsDimension x="-44" y="7"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBM_StatusBarTimerDrag:Show();
							</OnMouseUp>
						</Scripts>
					</Button>
					<Button name="$parentButtonSetToDefaults" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_DEFAULTS">
						<Size><AbsDimension x="98" y="22"/></Size>
						<Anchors>
							<Anchor point="RIGHT" relativeTo="$parentButtonMoveableBar" relativePoint="LEFT">
								<Offset><AbsDimension x="-2" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBMStatusBars_SetDefaultValues();

								HideUIPanel(DBMOptionsFrame);
								ShowUIPanel(DBMOptionsFrame);
							</OnMouseUp>
						</Scripts>
					</Button>

					<Button name="$parentButtonOldDefaults" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_271_DEFAULTS">
						<Size><AbsDimension x="128" y="22"/></Size>
						<Anchors>
							<Anchor point="RIGHT" relativeTo="$parentButtonSetToDefaults" relativePoint="LEFT">
								<Offset><AbsDimension x="-2" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBMStatusBars_SetOldDefaultValues();

								HideUIPanel(DBMOptionsFrame);
								ShowUIPanel(DBMOptionsFrame);
							</OnMouseUp>
						</Scripts>
					</Button>
				</Frames>
				<Scripts>
					<OnShow>
						if( DBM.Rank > 0 ) then
							DBMOptionsFramePage2OptionBroadcastPizzaTimer:Show();
							DBMOptionsFramePage2OptionBroadcastPizzaTimerText:SetText(DBMGUI_CHECKBOX_PIZZATIMER_BROADCAST);
							if( DBM.Options.Gui.PizzaTimerBroadcast ) then
								DBMOptionsFramePage2OptionBroadcastPizzaTimer:SetChecked(1);
							else
								DBMOptionsFramePage2OptionBroadcastPizzaTimer:SetChecked(nil);
							end
						else 
							DBMOptionsFramePage2OptionBroadcastPizzaTimer:Hide();
						end
						DBM_Gui_ChangeExampleBarDesign(DBM.Options.StatusBarDesign);
					</OnShow>
				</Scripts>
			</Frame>

			<!-- ************************************ -->
			<!--                 Page 3               -->
			<!-- ************************************ -->
			<Frame name="$parentPage3" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage3 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentStatusBarsTitle" inherits="GameFontNormalSmall" text="DBMGUI_BARS2_TITLE_STATUSBARS">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<!-- Statusbar Setup -->
					<Frame name="$parentStatusBarTimerExample" hidden="false" inherits="DBM_StatusBarTimerDefaultTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="46" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
					</Frame>
					
					<Frame name="$parentStatusBarDesignDropDown" inherits="UIDropDownMenuTemplate">	
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="190" y="20"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size><AbsDimension x="100" y="16"/></Size>
						<Scripts>
							<OnLoad>
								UIDropDownMenu_Initialize(this, function()
									local i = 1;
									while DBMStatusBars_Designs[i] do
										local info = UIDropDownMenu_CreateInfo();
										info.func = function()
											DBM_Gui_ChangeHugeExampleBarDesign(this:GetID(), true);
											HideUIPanel(DBMOptionsFrame);
											ShowUIPanel(DBMOptionsFrame);
										end;
										info.text = DBMStatusBars_Designs[i].name;
										UIDropDownMenu_AddButton(info);
										i = i + 1;
									end
								end);
								UIDropDownMenu_SetWidth(100);
								UIDropDownMenu_SetSelectedID(this, DBM.Options.HugeBars.StatusBarDesign);
							</OnLoad>
							<OnUpdate>
								if UIDropDownMenu_GetText(this) ~= DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].name then
									UIDropDownMenu_SetSelectedID(this, DBM.Options.HugeBars.StatusBarDesign);
									UIDropDownMenu_SetText(DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].name, this);
								end
							</OnUpdate>
						</Scripts>
					</Frame>					
					<CheckButton name="$parentButtonEnableStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="-10" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_CHECKBOX_STATUSBAR_ENABLE);
								this:SetChecked(DBM.Options.HugeBars.EnableStatusBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.EnableStatusBars = false;
									local i = 1
									while getglobal("DBM_HugeBar"..i) do
										DBMStatusBars_EndImportantBar(getglobal("DBM_HugeBar"..i))
										i = i + 1
									end
								else 
									DBM.Options.HugeBars.EnableStatusBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFillUpStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonEnableStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_STATUSBAR_FILLUP);
								this:SetChecked(DBM.Options.HugeBars.FillUpStatusBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.FillUpStatusBars = false;
								else 
									DBM.Options.HugeBars.FillUpStatusBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFliptOverStatusBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFillUpStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_STATUSBAR_FLIPOVER);
								this:SetChecked(DBM.Options.HugeBars.StatusBarsFlippedOver);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.StatusBarsFlippedOver = false;
								else 
									DBM.Options.HugeBars.StatusBarsFlippedOver = true;
								end
								DBMStatusBars_FlipOver();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonFlashBarOnEnd" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFliptOverStatusBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_FLASHONEND);
								this:SetChecked(DBM.Options.HugeBars.FlashBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.FlashBars = false;
								else 
									DBM.Options.HugeBars.FlashBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentButtonAutoColorBars" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonFlashBarOnEnd" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_AUTOCOLORBARS);
								this:SetChecked(DBM.Options.HugeBars.AutoColorBars);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.AutoColorBars = false;
									local i = 1
									while getglobal("DBM_HugeBar"..i) do
										if getglobal("DBM_HugeBar"..i).specialColor then
											getglobal("DBM_HugeBar"..i.."Bar"):SetStatusBarColor(getglobal("DBM_HugeBar"..i).table.color.R, getglobal("DBM_HugeBar"..i).table.color.G, getglobal("DBM_HugeBar"..i).table.color.B, getglobal("DBM_HugeBar"..i).table.color.A);
										else
											getglobal("DBM_HugeBar"..i.."Bar"):SetStatusBarColor(DBM.Options.HugeBars.StatusBarColor.r, DBM.Options.HugeBars.StatusBarColor.g, DBM.Options.HugeBars.StatusBarColor.b, DBM.Options.HugeBars.StatusBarColor.a);
										end
										i = i + 1
									end
								else 
									DBM.Options.HugeBars.AutoColorBars = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>		

					<CheckButton name="$parentButtonShowIconRight" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentButtonAutoColorBars" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BUTTON_STATUSBAR_ICON_SIDE);
								this:SetChecked(DBM.Options.HugeBars.IconRight);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.HugeBars.IconRight = false;
									
									local i = 1;
									while getglobal("DBM_HugeBar"..i.."Icon") do
										getglobal("DBM_HugeBar"..i.."Icon"):ClearAllPoints();
										getglobal("DBM_HugeBar"..i.."Icon"):SetPoint("RIGHT", "DBM_HugeBar"..i, "LEFT", (DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetX) or 0, DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetY or 0);
										i = i + 1;
									end
									if DBM_StatusBarTimerDrag2Icon then
										DBM_StatusBarTimerDrag2Icon:ClearAllPoints();
										DBM_StatusBarTimerDrag2Icon:SetPoint("RIGHT", "DBM_StatusBarTimerDrag2", "LEFT", (DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetX) or 0, DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetY or 0);
									end
								else 
									DBM.Options.HugeBars.IconRight = true;
									
									local i = 1;
									while getglobal("DBM_HugeBar"..i.."Icon") do
										getglobal("DBM_HugeBar"..i.."Icon"):ClearAllPoints();
										getglobal("DBM_HugeBar"..i.."Icon"):SetPoint("LEFT", "DBM_HugeBar"..i, "RIGHT", -(DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetX or 0), DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetY or 0);
										i = i + 1;
									end
									if DBM_StatusBarTimerDrag2Icon then
										DBM_StatusBarTimerDrag2Icon:ClearAllPoints();
										DBM_StatusBarTimerDrag2Icon:SetPoint("LEFT", "DBM_StatusBarTimerDrag2", "RIGHT", -(DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetX or 0), DBMStatusBars_Designs[DBM.Options.HugeBars.StatusBarDesign].iconOffsetY or 0);
									end
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>

					<ColorSelect name="$parentColorSelect" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="-10" y="-50"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">				<!-- Color Round -->
							<Size><AbsDimension x="75" y="75" /></Size>
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons"> <!-- Target -->
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Scripts>
							<OnShow>
								local r, g, b = DBM.Options.HugeBars.StatusBarColor.r, DBM.Options.HugeBars.StatusBarColor.g, DBM.Options.HugeBars.StatusBarColor.b;
								this:SetColorRGB(r,g,b); 
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.HugeBars.StatusBarColor.r = r;
								DBM.Options.HugeBars.StatusBarColor.g = g;
								DBM.Options.HugeBars.StatusBarColor.b = b;
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):SetStatusBarColor(r,g,b);
								<!-- Set Colors to the Bars -->
								DBMGuiUpdateStatusbars();
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<Slider name="$parentCSOpacitySlider" orientation="VERTICAL" minValue="0" maxValue="1" valueStep="0.01" defaultValue="1">
						<Size><AbsDimension x="16" y="80"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTimerExample" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="80" y="-50"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="OPACITY">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="100%">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="2" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="0%">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="1" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetValue(DBM.Options.HugeBars.StatusBarColor.a);
							</OnShow>
							<OnValueChanged>
								local r, g, b, a = getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):GetStatusBarColor();
								DBM.Options.HugeBars.StatusBarColor.a = this:GetValue();
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBar"):SetStatusBarColor(r,g,b, this:GetValue());
								
								DBMGuiUpdateStatusbars();
							</OnValueChanged>
						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Vertical">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<Slider name="$parentStatusBarScaleSlider" inherits="DBMSliderTemplate" maxValue="3" valueStep="0.025">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentButtonShowIconRight" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_SCALE_SLIDER);
								this:SetValue(DBM.Options.HugeBars.StatusBarSize.Scale);
								this.ShowTestMsg = false; -- wtf...
								this:SetMinMaxValues(0.5, 3);
								getglobal(this:GetName().."Value"):SetText(string.format("%.3f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.3f", this:GetValue()));
								DBM.Options.HugeBars.StatusBarSize.Scale = DBM.math.round(this:GetValue(), 3);
								DBMStatusBars_Resize();

								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
									DBMStatusBars_StartImportantBar(DBMGui_GetStatusBarTimerByID("test"), true)
									DBM.EndStatusBarTimer("test", true, nil, true, true)
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarWidthSlider" inherits="DBMSliderTemplate" maxValue="500" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarScaleSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_WIDTH_SLIDER);
								this:SetValue(DBM.Options.HugeBars.StatusBarSize.Width);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(100, 500);
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
								DBM.Options.HugeBars.StatusBarSize.Width = DBM.math.round(this:GetValue());
								DBMStatusBars_Resize();

								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
									DBMStatusBars_StartImportantBar(DBMGui_GetStatusBarTimerByID("test"), true)
									DBM.EndStatusBarTimer("test", true, nil, true, true)
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarTextSizeSlider" inherits="DBMSliderTemplate" maxValue="25" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarWidthSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								getglobal(this:GetName().."Title"):SetText(DBMGUI_STATUSBAR_TEXTSIZE_SLIDER);
								this:SetValue(DBM.Options.HugeBars.StatusBarSize.Text);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(5, 25);
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
								DBM.Options.HugeBars.StatusBarSize.Text = DBM.math.round(this:GetValue());
								DBMStatusBars_Resize();
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBarText"):SetFont(STANDARD_TEXT_FONT, DBM.Options.HugeBars.StatusBarSize.Text);
								getglobal(this:GetParent():GetName().."StatusBarTimerExampleBarTimer"):SetFont(STANDARD_TEXT_FONT, DBM.Options.HugeBars.StatusBarSize.Text);
								if this.ShowTestMsg then
									DBM.StartStatusBarTimer(10, "test", true);
									DBMStatusBars_StartImportantBar(DBMGui_GetStatusBarTimerByID("test"), true)
									DBM.EndStatusBarTimer("test", true, nil, true, true)
								end
								this.ShowTestMsg = true;
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentStatusBarEnlargeAfterSlider" inherits="DBMSliderTemplate" maxValue="20" valueStep="0.5">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarTextSizeSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-70" y="-20"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGEAFTER_TEXT:format(this:GetValue()));
								this:SetValue(DBM.Options.EnlargeBarsAfterSec);
								this:SetMinMaxValues(1, 20);
								getglobal(this:GetName().."Title"):SetText();
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGEAFTER_TEXT:format(this:GetValue()));
								DBM.Options.EnlargeBarsAfterSec = DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>

						<Layers>
							<Layer>
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="DBMGUI_BARS2_SLIDER_ENLARGEAFTER_TEXT">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="1"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12" />
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
					</Slider>
					<Slider name="$parentStatusBarEnlargeAfterPercentSlider" inherits="DBMSliderTemplate" maxValue="100" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarEnlargeAfterSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-14"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGEAFTER_PERC_TEXT:format(this:GetValue()));
								this:SetValue(100 - DBM.Options.EnlargeBarsAfterPerc);
								this:SetMinMaxValues(60, 100);
								getglobal(this:GetName().."Title"):SetText();
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f%%",  this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f%%", this:GetValue()));
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGEAFTER_PERC_TEXT:format(this:GetValue()));
								DBM.Options.EnlargeBarsAfterPerc = 100 - DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>

						<Layers>
							<Layer>
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="DBMGUI_BARS2_SLIDER_ENLARGEAFTER_PERC_TEXT">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="1"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12" />
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
					</Slider>
					<Slider name="$parentStatusBarEnlargeMaxTimeSlider" inherits="DBMSliderTemplate" maxValue="120" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentStatusBarEnlargeAfterPercentSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-14"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGMAXTIME_TEXT:format(this:GetValue()));
								this:SetValue(DBM.Options.EnlargeBarsMaxSec);
								this:SetMinMaxValues(3, 120);
								getglobal(this:GetName().."Title"):SetText();
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f",  this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.0f", this:GetValue()));
								getglobal(this:GetName().."Text"):SetText(DBMGUI_BARS2_SLIDER_ENLARGMAXTIME_TEXT:format(this:GetValue()));
								DBM.Options.EnlargeBarsMaxSec = DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>

						<Layers>
							<Layer>
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="DBMGUI_BARS2_SLIDER_ENLARGMAXTIME_TEXT">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="1"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12" />
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
					</Slider>

					<Button name="$parentButtonSetToDefaults" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_DEFAULTS">
						<Size><AbsDimension x="98" y="22"/></Size>
						<Anchors>
							<Anchor point="BOTTOMRIGHT">
								<Offset><AbsDimension x="-14" y="30"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBMHugeStatusBars_SetDefaultValues();

								HideUIPanel(DBMOptionsFrame);
								ShowUIPanel(DBMOptionsFrame);
							</OnMouseUp>
						</Scripts>
					</Button>
					<Button name="$parentButtonMoveableBar" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_MOVEABLEBAR">
						<Size><AbsDimension x="104" y="22"/></Size>
						<Anchors>
							<Anchor point="BOTTOM" relativeTo="$parentButtonSetToDefaults" relativePoint="TOP">
								<Offset><AbsDimension x="0" y="3"/></Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnMouseUp>
								DBM_StatusBarTimerDrag2:Show();
							</OnMouseUp>
						</Scripts>
					</Button>
				</Frames>
				<Scripts>
					<OnShow>
						DBM_Gui_ChangeHugeExampleBarDesign(DBM.Options.HugeBars.StatusBarDesign);
					</OnShow>
				</Scripts>
			</Frame>



			<!-- ************************************ -->
			<!--                 Page 4               -->
			<!-- ************************************ -->
			<Frame name="$parentPage4" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage4 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentRaidWarningTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_RAIDWARNING">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12"/>
							</FontHeight>
						</FontString>
						<FontString name="$parentSelfWarningTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_SELFWARNING">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-280"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12"/>
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>
				<Frames>

					<!-- ***************** -->
					<!-- Raidwarning Setup -->
					<!-- ***************** -->
					<Frame name="$parentRaidWarningDropDown" inherits="UIDropDownMenuTemplate">	
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="20" y="-50"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size><AbsDimension x="180" y="16"/></Size>
						<Scripts>
							<OnLoad>
								UIDropDownMenu_Initialize(this, DBMOptionsFrame_RaidWarningDropDown_CreateMenu);
								UIDropDownMenu_SetWidth(180);
								UIDropDownMenu_SetSelectedID(this, 1);
							</OnLoad>
							<OnShow>
								UIDropDownMenu_SetSelectedID(this, DBM.Options.Gui.RaidWarnSound);
								if( DBM.Options.Gui.RaidWarnSound == 1 ) then
									UIDropDownMenu_SetText(DBMGUI_DROPDOWN_RAIDWARNING_OPTION_1, this);
	
								elseif(  DBM.Options.Gui.RaidWarnSound == 2 ) then
									UIDropDownMenu_SetText(DBMGUI_DROPDOWN_RAIDWARNING_OPTION_2, this);

								elseif(  DBM.Options.Gui.RaidWarnSound == 3 ) then
									UIDropDownMenu_SetText(DBMGUI_DROPDOWN_RAIDWARNING_OPTION_3, this);
								end
							</OnShow>
						</Scripts>
					</Frame>
					<ColorSelect name="$parentRaidWarningColorSelect1" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentRaidWarningDropDown" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="5" y="-120"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">
							<Size><AbsDimension x="75" y="75" /></Size>		
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormalSmall" text="DBMGUI_WARNINGCOLORS_COLOR_1">
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP">
											<Offset>
												<AbsDimension x="0" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12"/>
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetColorRGB(DBM.Options.RaidWarningColors[1].r, DBM.Options.RaidWarningColors[1].g, DBM.Options.RaidWarningColors[1].b);
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.RaidWarningColors[1].r = r;
								DBM.Options.RaidWarningColors[1].g = g;
								DBM.Options.RaidWarningColors[1].b = b;
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<ColorSelect name="$parentRaidWarningColorSelect2" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentRaidWarningColorSelect1" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="5" y="0"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">
							<Size><AbsDimension x="75" y="75" /></Size>		
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormalSmall" text="DBMGUI_WARNINGCOLORS_COLOR_2">
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP">
											<Offset>
												<AbsDimension x="0" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12"/>
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetColorRGB(DBM.Options.RaidWarningColors[2].r, DBM.Options.RaidWarningColors[2].g, DBM.Options.RaidWarningColors[2].b);
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.RaidWarningColors[2].r = r;
								DBM.Options.RaidWarningColors[2].g = g;
								DBM.Options.RaidWarningColors[2].b = b;
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<ColorSelect name="$parentRaidWarningColorSelect3" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentRaidWarningColorSelect2" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="5" y="0"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">
							<Size><AbsDimension x="75" y="75" /></Size>		
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormalSmall" text="DBMGUI_WARNINGCOLORS_COLOR_3">
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP">
											<Offset>
												<AbsDimension x="0" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12"/>
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetColorRGB(DBM.Options.RaidWarningColors[3].r, DBM.Options.RaidWarningColors[3].g, DBM.Options.RaidWarningColors[3].b);
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.RaidWarningColors[3].r = r;
								DBM.Options.RaidWarningColors[3].g = g;
								DBM.Options.RaidWarningColors[3].b = b;
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<ColorSelect name="$parentRaidWarningColorSelect4" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parentRaidWarningColorSelect3" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="5" y="0"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">
							<Size><AbsDimension x="75" y="75" /></Size>		
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormalSmall" text="DBMGUI_WARNINGCOLORS_COLOR_4">
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP">
											<Offset>
												<AbsDimension x="0" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="12"/>
									</FontHeight>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this:SetColorRGB(DBM.Options.RaidWarningColors[4].r, DBM.Options.RaidWarningColors[4].g, DBM.Options.RaidWarningColors[4].b);
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.RaidWarningColors[4].r = r;
								DBM.Options.RaidWarningColors[4].g = g;
								DBM.Options.RaidWarningColors[4].b = b;
							</OnColorSelect>
						</Scripts>
					</ColorSelect>

					<Slider name="$parentRaidWarningYSlider" orientation="HORIZONTAL" minValue="0" maxValue="700" valueStep="1">
						<Size><AbsDimension x="230" y="20"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentRaidWarningDropDown" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="5" y="-40"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="Y position">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="0">
									<Anchors>
										<Anchor point="TOP" relativePoint="BOTTOMLEFT">
											<Offset>
												<AbsDimension x="3" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="-700">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="3" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								this:SetValue( DBM.Options.Gui["RaidWarning_PosY"] * -1 );
							</OnShow>
							<OnValueChanged>
								if this.ShowTestMsg then
									DBM.Options.Gui["RaidWarning_PosY"] = DBM.math.round(this:GetValue()) * (-1);
	
									RaidWarningFrame:ClearAllPoints();
									RaidWarningFrame:SetPoint("CENTER", "UIParent", "TOP", 
												DBM.Options.Gui["RaidWarning_PosX"],
												DBM.Options.Gui["RaidWarning_PosY"]);
									RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>

						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<Slider name="$parentRaidWarningXSlider" orientation="HORIZONTAL" maxValue="700" valueStep="1">
						<Size><AbsDimension x="230" y="20"/></Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parentRaidWarningYSlider" relativePoint="BOTTOM">
								<Offset><AbsDimension x="0" y="-20"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="X position">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="-700">
									<Anchors>
										<Anchor point="TOP" relativePoint="BOTTOMLEFT">
											<Offset>
												<AbsDimension x="3" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="700">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="3" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								this:SetValue( DBM.Options.Gui["RaidWarning_PosX"]);
								this.ShowTestMsg = false;
								this:SetMinMaxValues(-700, 700)
							</OnShow>
							<OnValueChanged>
								if this.ShowTestMsg then
									DBM.Options.Gui["RaidWarning_PosX"] = DBM.math.round(this:GetValue());
	
									RaidWarningFrame:ClearAllPoints();
									RaidWarningFrame:SetPoint("CENTER", "UIParent", "TOP", 
												DBM.Options.Gui["RaidWarning_PosX"],
												DBM.Options.Gui["RaidWarning_PosY"]);
									RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>

						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
	

					<Slider name="$parentSelfWarningFontSizeSlider" orientation="VERTICAL" maxValue="35" valueStep="0.1">
						<Size><AbsDimension x="16" y="75"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentRaidWarningColorSelect1" relativePoint="BOTTOMLEFT">
								<Offset><AbsDimension x="0" y="-60"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="Size">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="5">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="3" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="35">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="3" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>								
								this.ShowTextMsg = false;
								this:SetValue( DBM.Options.Gui["SelfWarning_Height"] );
								this:SetMinMaxValues(5, 35)
							</OnShow>
							<OnValueChanged>
								if this.ShowTextMsg then
									DBM.Options.Gui["SelfWarning_Height"] = this:GetValue();
									DBMWarningFrame:SetFont(	DBM.Options.Gui["SelfWarning_Font"], 
													DBM.Options.Gui["SelfWarning_Height"],
													"" );

									RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE);
								end
								this.ShowTextMsg = true;
							</OnValueChanged>

						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Vertical">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<Slider name="$parenttSelfWarningYSlider" orientation="VERTICAL" minValue="0" maxValue="500" valueStep="5">
						<Size><AbsDimension x="16" y="75"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentSelfWarningFontSizeSlider" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="40" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="Pos Y">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="0">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="3" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="+500">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="3" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								this:SetValue( 500 - DBM.Options.Gui["SelfWarning_PosY"] );
							</OnShow>
							<OnValueChanged>
								if this.ShowTestMsg then
									DBM.Options.Gui["SelfWarning_PosY"] = 500 - DBM.math.round(this:GetValue());
	
									DBMWarningFrame:ClearAllPoints();
									DBMWarningFrame:SetPoint("CENTER", "UIParent", "BOTTOM", 
												DBM.Options.Gui["SelfWarning_PosX"],
												DBM.Options.Gui["SelfWarning_PosY"])
									RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>

						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Vertical">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<Slider name="$parenttSelfWarningXSlider" orientation="VERTICAL" maxValue="700" valueStep="25">
						<Size><AbsDimension x="16" y="75"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parenttSelfWarningYSlider" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="50" y="0"/></Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<EdgeSize>
								<AbsValue val="8"/>
							</EdgeSize>
							<TileSize>
								<AbsValue val="8"/>
							</TileSize>
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6"/>
							</BackgroundInsets>
						</Backdrop>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="Pos X">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="0" y="10"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="700">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
											<Offset>
												<AbsDimension x="3" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
								<FontString inherits="GameFontHighlightSmall" text="-700">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="3" y="5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
								this.ShowTestMsg = false;
								this:SetValue( DBM.Options.Gui["SelfWarning_PosX"] * -1 );
								this.ShowTestMsg = false;
								this:SetMinMaxValues(-700, 700)
							</OnShow>
							<OnValueChanged>
								if this.ShowTestMsg then
									DBM.Options.Gui["SelfWarning_PosX"] = DBM.math.round(this:GetValue()) * (-1);
	
									DBMWarningFrame:ClearAllPoints();
									DBMWarningFrame:SetPoint("CENTER", "UIParent", "BOTTOM", 
												DBM.Options.Gui["SelfWarning_PosX"],
												DBM.Options.Gui["SelfWarning_PosY"]);
									RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE);
								end
								this.ShowTestMsg = true;
							</OnValueChanged>

						</Scripts>
						<ThumbTexture file="Interface\Buttons\UI-SliderBar-Button-Vertical">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
						</ThumbTexture>
					</Slider>
					<CheckButton name="$parentOptionDisableSelfWarningFrame" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentSelfWarningColorSelect" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="10" y="-80"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_ENABLE_SELFWARNINGFRAME);
								if( DBM.Options.Gui.SelfWarning_Enable == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.Gui.SelfWarning_Enable = not this:GetChecked();
								if( DBM.Options.Gui["SelfWarning_Enable"] == false ) then
									DBMWarningFrame:Hide();
								else
									DBMWarningFrame:Show();
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>

					<Button name="$parentTestSoundButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_SOUND_TEST">
						<Size><AbsDimension x="90" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentRaidWarningDropDown" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="20" y="5"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBMBossModFrame_RaidWarningPlaySound(DBM.Options.Gui.RaidWarnSound);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Button name="$parentShowMessageButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_SHOW_EXAMPLE">
						<Size><AbsDimension x="90" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentTestSoundButton" relativePoint="BOTTOMLEFT">
								<Offset><AbsDimension x="0" y="-5"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								RaidWarningFrames_AddLocalMessages(DBMGUI_RAIDWARNING_EXAMPLE_NEW:format(
								DBM.Options.RaidWarningColors[1].r * 255, DBM.Options.RaidWarningColors[1].g * 255, DBM.Options.RaidWarningColors[1].b * 255, 
								DBM.Options.RaidWarningColors[2].r * 255, DBM.Options.RaidWarningColors[2].g * 255, DBM.Options.RaidWarningColors[2].b * 255, 
								DBM.Options.RaidWarningColors[3].r * 255, DBM.Options.RaidWarningColors[3].g * 255, DBM.Options.RaidWarningColors[3].b * 255, 
								DBM.Options.RaidWarningColors[4].r * 255, DBM.Options.RaidWarningColors[4].g * 255, DBM.Options.RaidWarningColors[4].b * 255
								))
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Button name="$parentResetButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_RAIDWARNING_RESET">
						<Size><AbsDimension x="90" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentShowMessageButton" relativePoint="BOTTOMLEFT">
								<Offset><AbsDimension x="0" y="-5"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.Options.Gui["RaidWarning_R"] 	= 1.000000;
								DBM.Options.Gui["RaidWarning_G"] 	= 0.858823;
								DBM.Options.Gui["RaidWarning_B"] 	= 0.717647;
								DBM.Options.Gui["RaidWarning_Delay"] 	= 1;
								DBM.Options.Gui["RaidWarning_Font"] 	= STANDARD_TEXT_FONT;
								DBM.Options.Gui["RaidWarning_Height"] 	= 20;
								DBM.Options.Gui["RaidWarning_PosX"] 	= 0;
								DBM.Options.Gui["RaidWarning_PosY"] 	= -235;

								DBM.Options.Gui["SelfWarning_R"] 	= 1.000000;
								DBM.Options.Gui["SelfWarning_G"] 	= 0.858823;
								DBM.Options.Gui["SelfWarning_B"] 	= 0.717647;
								DBM.Options.Gui["SelfWarning_Delay"] 	= 5;
								DBM.Options.Gui["SelfWarning_Font"] 	= STANDARD_TEXT_FONT;
								DBM.Options.Gui["SelfWarning_Height"] 	= 20;
								DBM.Options.Gui["SelfWarning_PosX"] 	= 0;
								DBM.Options.Gui["SelfWarning_PosY"] 	= 235;
								RaidWarningFrame:ClearAllPoints();
								RaidWarningFrame:SetPoint("CENTER", "UIParent", "TOP", 
											DBM.Options.Gui["RaidWarning_PosX"],
											DBM.Options.Gui["RaidWarning_PosY"]);

								DBMBossModFrame_OnEvent("PLAYER_LOGIN");		-- Reset Positions
--								DBM.AddMsg(DBMGUI_BUTTON_RAIDWARNING_RESET_DONE);

								HideUIPanel(DBMBossModFrame);
								ShowUIPanel(DBMBossModFrame);
								ShowUIPanel(DBMOptionsFrame);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Button name="$parentResetColorButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_RAIDWARNING_RESET_COLOR">
						<Size><AbsDimension x="90" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentResetButton" relativePoint="BOTTOMLEFT">
								<Offset><AbsDimension x="0" y="-5"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.Options.RaidWarningColors = {
									{r = 0.41, g = 0.80, b = 0.94}, -- unimportant information
									{r = 0.95, g = 0.95, b = 0.00}, -- important information
									{r = 1.00, g = 0.50, b = 0.00}, -- more important warnings
									{r = 1.00, g = 0.10, b = 0.10}, -- even more important warnings 
									{r = 0.05, g = 0.20, b = 1.00}, -- wtf! (unused)
								}
								HideUIPanel(DBMBossModFrame);
								ShowUIPanel(DBMBossModFrame);
								ShowUIPanel(DBMOptionsFrame);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>


				</Frames>
			</Frame>


			<!-- ************************************ -->
			<!--                 Page 5               -->
			<!-- ************************************ -->
			<Frame name="$parentPage5" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage4 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentSpecialWarning" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_SPECIALWARNING">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="30" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
						<FontString name="$parentShakescreen" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_SHAKESCREEN">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="30" y="-140"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
						<FontString name="$parentFlashEffects" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_FLASHEFFECT">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="30" y="-225"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
						<FontString name="$parentCombatInfos" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_COMBATSYSTEM">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="30" y="-310"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>

				<Frames>
					<!-- Special Warning Texts --> 
					<CheckButton name="$parentOptionSpecialWarnings" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="40" y="-45"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_SPECWARNING_ENABLE);
								this:SetChecked(DBM.Options.SpecialWarningsEnabled);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.SpecialWarningsEnabled = false;
								else 
									DBM.Options.SpecialWarningsEnabled = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<Button name="$parentTestWarningButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_SPECWARNING_TEST">
						<Size><AbsDimension x="90" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionSpecialWarnings" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="165" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.AddSpecialWarning(DBMGUI_BUTTON_SPECWARNING_EXAMPLE);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Slider name="$parentDurationSlider" inherits="DBMSliderTemplate" maxValue="15" valueStep="0.1">
						<Size>
							<AbsDimension x="130" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentOptionSpecialWarnings" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="60" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_SPECWARNING_DURATION);
								this:SetValue(DBM.Options.SpecialWarningTextDuration);
								this:SetMinMaxValues(1, 15)
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
								DBM.Options.SpecialWarningTextDuration = DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentFadeTimeSlider" inherits="DBMSliderTemplate" maxValue="10" valueStep="1">
						<Size>
							<AbsDimension x="130" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentDurationSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_SPECWARNING_FADETIME);
								this:SetValue(DBM.Options.SpecialWarningTextFadeTime);
								this:SetMinMaxValues(1, 10)
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								DBM.Options.SpecialWarningTextFadeTime = DBM.math.round(this:GetValue(), 1);
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentTextSizeSlider" inherits="DBMSliderTemplate" maxValue="50" valueStep="1">
						<Size>
							<AbsDimension x="130" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentFadeTimeSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_SPECWARNING_TEXTSIZE);
								this:SetValue(DBM.Options.SpecialWarningTextSize);
								this:SetMinMaxValues(5, 50)
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								DBM.Options.SpecialWarningTextSize = DBM.math.round(this:GetValue(), 1);
								DBMSpecialWarningFrameText:SetFont(STANDARD_TEXT_FONT, 
												    DBM.Options.SpecialWarningTextSize, 
												    "THICKOUTLINE");
							</OnValueChanged>
						</Scripts>
					</Slider>
					<ColorSelect name="$parentColorSelect" enableMouse="true">
						<Size><AbsDimension x="75" y="75" /></Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parentTestWarningButton" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="38" y="-5"></AbsDimension>
								</Offset>
							</Anchor>
						</Anchors>
						<ColorWheelTexture name="$parentPickerWheel">
							<Size><AbsDimension x="75" y="75" /></Size>
						</ColorWheelTexture>
						<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons"> <!-- Target -->
							<Size>
								<AbsDimension x="10" y="10"/>
							</Size>
							<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
						</ColorWheelThumbTexture>
						<Scripts>
							<OnShow>
								local r, g, b = DBM.Options.SpecialWarningTextColor.r, DBM.Options.SpecialWarningTextColor.g, DBM.Options.SpecialWarningTextColor.b;
								this:SetColorRGB(r,g,b); 
							</OnShow>
							<OnColorSelect>
								local r, g, b = this:GetColorRGB();
								DBM.Options.SpecialWarningTextColor.r = r;
								DBM.Options.SpecialWarningTextColor.g = g;
								DBM.Options.SpecialWarningTextColor.b = b;
								DBMSpecialWarningFrameText:SetTextColor(r, g, b, DBM.Options.SpecialWarningTextColor.a);
							</OnColorSelect>
						</Scripts>
					</ColorSelect>
					<!-- Shakes -->
					<CheckButton name="$parentOptionShakeScreenEffects" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="40" y="-150"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_SHAKESCREEN_ENABLE);
								this:SetChecked(DBM.Options.ShakeEnabled);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.ShakeEnabled = false;
								else 
									DBM.Options.ShakeEnabled = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<Button name="$parentTestShakeButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_SHAKESCREEN_TEST">
						<Size><AbsDimension x="90" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionShakeScreenEffects" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="165" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.ShakeScreen();
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Slider name="$parentShakeDurationSlider" inherits="DBMSliderTemplate" maxValue="5" valueStep="0.1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentOptionShakeScreenEffects" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="60" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_SHAKESCREEN_DURATION);
								this:SetValue(DBM.Options.ShakeDuration);
								this:SetMinMaxValues(0.1, 5)
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
								DBM.Options.ShakeDuration = DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentShakeIntensitySlider" inherits="DBMSliderTemplate" maxValue="100" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentShakeDurationSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_SHAKESCREEN_INTENSITY);
								this:SetValue(DBM.Options.ShakeIntensity);
								this:SetMinMaxValues(1, 100)
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								DBM.Options.ShakeIntensity = DBM.math.round(this:GetValue(), 1);
							</OnValueChanged>
						</Scripts>
					</Slider>
					<!-- Flashes -->
					<CheckButton name="$parentOptionFlashEffects" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="40" y="-235"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_FLASHEFFECT_ENABLE);
								this:SetChecked(DBM.Options.FlashEnabled);
							</OnShow>
							<OnMouseUp>
								if( this:GetChecked() ) then
									DBM.Options.FlashEnabled = false;
								else 
									DBM.Options.FlashEnabled = true;
								end
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<Button name="$parentTestFlashButton" inherits="UIPanelButtonTemplate" text="DBMGUI_BUTTON_FLASHEFFECT_TEST">
						<Size><AbsDimension x="90" y="18"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentOptionFlashEffects" relativePoint="TOPRIGHT">
								<Offset><AbsDimension x="165" y="0"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnMouseUp>
								DBM.AddSpecialWarning("", false, true);
							</OnMouseUp>
						</Scripts>
						<NormalText inherits="GameFontNormalSmall"/>
						<HighlightText inherits="GameFontNormalSmall"/>
					</Button>
					<Slider name="$parentFlashDurationSlider" inherits="DBMSliderTemplate" maxValue="5" valueStep="0.1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentOptionFlashEffects" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="60" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_FLASHEFFECT_DURATION);
								this:SetValue(DBM.Options.FlashDuration);
								this:SetMinMaxValues(0.2, 5)
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(DBM.math.round(this:GetValue()));
								DBM.Options.FlashDuration = DBM.math.round(this:GetValue());
							</OnValueChanged>
						</Scripts>
					</Slider>
					<Slider name="$parentFlashesSlider" inherits="DBMSliderTemplate" maxValue="10" valueStep="1">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parentFlashDurationSlider" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Title"):SetText(DBMGUI_SLIDER_FLASHEFFECT_FLASHES);
								this:SetValue(DBM.Options.NumFlashes);
								this:SetMinMaxValues(1, 10)
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
							</OnShow>
							<OnValueChanged>
								getglobal(this:GetName().."Value"):SetText(string.format("%.1f", this:GetValue()));
								DBM.Options.NumFlashes = DBM.math.round(this:GetValue(), 1);
							</OnValueChanged>
						</Scripts>
					</Slider>
					
					<!-- Combat Informations -->
					<CheckButton name="$parentShowCombatInformations" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT">
								<Offset><AbsDimension x="40" y="-320"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_SHOWCOMBATINFO);
								if( DBM.Options.ShowCombatInformations == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.ShowCombatInformations = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentShowCombatSyncInfo" inherits="OptionsCheckButtonTemplate">
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentShowCombatInformations" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_SHOWPULLSYNCINFO);
								if( DBM.Options.ShowPullSyncInfo == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.ShowPullSyncInfo = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>

				</Frames>
			</Frame>

			<!-- ************************************ -->
			<!--                 Page 6               -->
			<!-- ************************************ -->
			<Frame name="$parentPage6" hidden="true" setAllPoints="true">  <!-- DBMOptionsFramePage6 -->
				<Layers>
					<Layer level="ARTWORK">
						<FontString name="$parentAutoRespondTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_AUTORESPOND">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-35"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>

						<FontString name="$parentLoadOnDemandTitle" inherits="GameFontNormalSmall" text="DBMGUI_TITLE_LOAD_ON_DEMAND">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="20" y="-275"/>
									</Offset>
								</Anchor>
							</Anchors>
							<FontHeight>
								<AbsValue val="12" />
							</FontHeight>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<CheckButton name="$parentAutoRespondEnable" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="20" y="-50"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AUTORESPOND_ENABLE);
								if( DBM.Options.AutoRespond == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.AutoRespond = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentAutoRespondShowWhispers" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentAutoRespondEnable" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AUTORESPOND_SHOW_WHISPERS);
								if( DBM.Options.ShowWhispersDuringCombat == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.ShowWhispersDuringCombat = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentAutoRespondInformUser" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentAutoRespondShowWhispers" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AUTORESPOND_INFORM_USER);
								if( DBM.Options.ShowAutoRespondInfo == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.ShowAutoRespondInfo = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentAutoRespondHideReply" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentAutoRespondInformUser" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_AUTORESPOND_HIDE_REPLY);
								if( DBM.Options.HideOutgoingInfoWhisper == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.HideOutgoingInfoWhisper = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<CheckButton name="$parentEnableStatusOption" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentAutoRespondHideReply" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-23"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_ALLOW_STATUS_COMMAND);
								if( DBM.Options.EnableStatusCommand == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.EnableStatusCommand = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>
					<EditBox name="$parentAutoRespondBusyMessage" inherits="DBMBossModFrameEditBoxTemplate" letters="250">
						<Size><AbsDimension x="310" y="32"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentEnableStatusOption" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="15" y="-33"/></Offset>
						</Anchor></Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentTitle" inherits="GameFontNormalSmall" text="DBMGUI_EDITBOX_AUTORESPOND_TITLE">
									<Anchors><Anchor point="TOPLEFT" relativeTo="$parent" relativePoint="TOPLEFT"><Offset>
												<AbsDimension x="5" y="10"/>
									</Offset></Anchor></Anchors>
								</FontString>
							</Layer>
						</Layers>
						<FontString inherits="ChatFontNormal"></FontString>
						<Scripts>
							<OnLoad>
								this:SetAutoFocus(false);
							</OnLoad>
							<OnShow>
								this:SetText(DBM.Options.BusyMessage);
							</OnShow>
							<OnTextChanged>
								DBM.Options.BusyMessage = this:GetText();
							</OnTextChanged>
							<OnEnter>
								GameTooltip:Hide();
								GameTooltip:ClearLines();
								GameTooltip:SetOwner(this, "ANCHOR_CURSOR");
								GameTooltip:SetText(DBMGUI_EDITBOX_AUTORESPOND_TOOLTIP_HEADER);
								local i = 1;
								while( getglobal("DBMGUI_EDITBOX_AUTORESPOND_TOOLTIP_TEXT"..i) ) do
									GameTooltip:AddDoubleLine(getglobal("DBMGUI_EDITBOX_AUTORESPOND_TOOLTIP_TEXT"..i)[1], 
												  getglobal("DBMGUI_EDITBOX_AUTORESPOND_TOOLTIP_TEXT"..i)[2], 
												  NORMAL_FONT_COLOR.r,
												  NORMAL_FONT_COLOR.g, 
												  NORMAL_FONT_COLOR.b, 
												  HIGHLIGHT_FONT_COLOR.r, 
												  HIGHLIGHT_FONT_COLOR.g,
												  HIGHLIGHT_FONT_COLOR.b);
									i = i + 1;
								end
								GameTooltip:Show()
							</OnEnter>
							<OnLeave>
								GameTooltip:Hide();
							</OnLeave>
						</Scripts>
					</EditBox>

					<!-- Raid Settings -->


					<!--Load on Demand Options -->
					<CheckButton name="$parentLoadGUIOnLogin" inherits="OptionsCheckButtonTemplate">
						<Size><AbsDimension x="20" y="20"/></Size>
						<Anchors><Anchor point="TOPLEFT" relativeTo="$parentLoadOnDemandTitle" relativePoint="TOPLEFT">
								<Offset><AbsDimension x="0" y="-15"/></Offset>
						</Anchor></Anchors>
						<Scripts>
							<OnShow>
								getglobal(this:GetName().."Text"):SetText(DBMGUI_CHECKBOX_LOAD_GUI_ONLOAD);
								if( DBM.Options.LoadGUIOnLoad == true ) then
									this:SetChecked(1);
								else
									this:SetChecked(nil);
								end
							</OnShow>
							<OnMouseUp>
								DBM.Options.LoadGUIOnLoad = not this:GetChecked();
							</OnMouseUp>
						</Scripts>
					</CheckButton>

				</Frames>
			</Frame>

		</Frames>
		<Scripts>
			<OnUpdate>
				DBMGUI_SetTabPosition_Update(2, -4, -12, -16, 0, DBMGUI_SIDEFRAME_TABCOUNT);
			</OnUpdate>
			<OnLoad>
				PanelTemplates_SetNumTabs(this, DBMGUI_SIDEFRAME_TABCOUNT);
				this.selectedTab = 1;
				PanelTemplates_UpdateTabs(this);
				if DBM.GuiTabsToLoad then
					for index, value in pairs(DBM.GuiTabsToLoad) do
						DBM_Gui_AddTab(value[1], value[2], value[3], value[4]);
					end
				end
				DBM.GuiTabsToLoad = nil;
			</OnLoad>
			<OnShow>
				DBMOptionsFrame_OnShow();

				for i=1, DBMGUI_SIDEFRAME_TABCOUNT, 1 do
					getglobal("DBMOptionsFrameTab"..i):Show();
				end
			</OnShow>
			<OnHide>
				DBMOptionsFrame_OnHide();
			</OnHide>
		</Scripts>
	</Frame>




</Ui>


